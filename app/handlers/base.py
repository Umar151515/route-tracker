from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

from core.managers import UserManager
from core.managers import BusStopsManager
from core.managers import ConfigManager
from core.managers import GoogleSheetsManager
from ..core.services import UserService
from ..utils import send_message, edit_message
from ..keyboards import get_stops_keyboard


router = Router()

@router.message(F.text == "üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def user_information(message: Message, user_service: UserService, user_manager: UserManager, bus_stops_manager: BusStopsManager):
    user_id = message.from_user.id

    if not await user_service.check_user_exists(user_id):
        return
    
    try:
        role, name, bus_number = await user_manager.get_parameters(
            user_id=user_id,
            get_role=True, 
            get_name=True, 
            get_bus_number=True
        )
        stop_names = await bus_stops_manager.get_stops(bus_number=bus_number, get_stop_name=True)
    except Exception as e:
        await send_message(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ user_information —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}.")
        return

    if role == "admin":
        await send_message(
            message, 
            (
                "<b>‚öôÔ∏è –î–∞–Ω–Ω—ã–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                f"<b>–ò–º—è:</b> {name}\n"
                f"<b>–†–æ–ª—å:</b> <tg-spoiler>–ê–¥–º–∏–Ω</tg-spoiler>\n"
                f"<b>–¢–≤–æ–π ID:</b> <code>{user_id}</code>"
            ),
            parse_mode=ParseMode.HTML
        )
    elif role == "driver":
        stops_list_str = "‚Äî " + "\n‚Äî ".join(stop_names) if stop_names else "–ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫. C–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"
        if not stop_names:
            ConfigManager.log.logger.critical(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫.")

        await send_message(
            message, 
            (
                "<b>üöå –í–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
                f"<b>–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è:</b> {name}\n"
                f"<b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞:</b> <code>{bus_number}</code>\n"
                f"<b>–†–æ–ª—å:</b> –í–æ–¥–∏—Ç–µ–ª—å\n"
                f"<b>–¢–≤–æ–π ID:</b> <code>{user_id}</code>\n\n"
                
                f"<b>üöè –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>\n"
                f"{stops_list_str}"
            ), 
            parse_mode=ParseMode.HTML
        )
    else:
        await send_message(message, f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        ConfigManager.log.logger.critical(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–ª—å {role}.")