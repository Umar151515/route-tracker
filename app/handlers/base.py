from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message

from app import keyboards
from core.managers import UserManager
from core.managers import ConfigManager
from ..utils.messages import send_message


router = Router()

@router.message(CommandStart())
async def start(message: Message, user_manager: UserManager):
    try:
        user = message.from_user
        user_manager.create_user(user.id)

        await send_message(
            message, 
            f"–ü—Ä–∏–≤–µ—Ç, *{user.first_name}*!\n–Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!", 
            reply_markup=keyboards.get_main_keyboard(
                         user_manager.get_parameters(user.id, web_search=True))
        )
    except Exception as e:
        await send_message(message, f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode=None)

@router.message(F.text == "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç")
async def enable_web_search(message: Message, user_manager: UserManager):
    try:
        user = user_manager.get_user(message.from_user.id, True)
        
        account_info = (
            "üîê <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
            f"üÜî <b>ID:</b> <code>{user.id}</code>\n"
            f"üåü <b>–°—Ç–∞—Ç—É—Å:</b> {user.status}\n\n"
            "üìù <b>–¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏</b>\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: <code>{user.text_model}</code>\n"
            f"‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: <code>{ConfigManager.text.selected_tool}</code>\n\n"
            "üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: <code>{user.image_model}</code>\n"
            f"‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: <code>{ConfigManager.image.selected_tool}</code>\n\n"
            f"üî¢ <b>–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã:</b> {user.requests_limit}" if user.status == "limited" else ""
        )

        await send_message(message, account_info, parse_mode=ParseMode.HTML)
    except Exception as e:
        await send_message(message, f"{e}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.", parse_mode=None)