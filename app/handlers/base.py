from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ErrorEvent
from aiogram.fsm.context import FSMContext

from core.managers import UserManager
from core.managers import BusStopsManager
from core.managers import ConfigManager
from utils.app import send_message, edit_message
from ..keyboards import driver_main_keyboard, admin_main_keyboard
from ..filters import ExistsFilter


router = Router()

@router.message(CommandStart(), ExistsFilter())
async def cmd_start(message: Message, user_manager: UserManager):
    user_id = message.from_user.id
    
    try:
        role, name = await user_manager.get_parameters(user_id=user_id, get_role=True, get_name=True)
    except Exception as e:
        await send_message(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ user_information —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}.")
        return
    if role == "driver":
        await send_message(
            message, 
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {name}!\n\n"
            "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
            "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /delete_last_entry\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 200 –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /my_details\n"
            "–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /menu\n",
            parse_mode=None
        )
    elif role == "admin":
        await send_message(
            message,
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {name}!\n\n"
            "–í–∞—à–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ç: /menu\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: /my_details\n"
            "–î–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            parse_mode=None
        )
    else:
        await send_message(message, f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        ConfigManager.log.logger.critical(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–ª—å {role}.")

@router.message(Command("my_details"), ExistsFilter())
@router.message(F.text == "üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", ExistsFilter())
async def user_information(message: Message, user_manager: UserManager, bus_stops_manager: BusStopsManager):
    user_id = message.from_user.id
    
    try:
        role, name, bus_number = await user_manager.get_parameters(
            user_id=user_id,
            get_role=True, 
            get_name=True, 
            get_bus_number=True
        )
        stop_names = []
        if bus_number and await bus_stops_manager.bus_exists(bus_number=bus_number):
            stop_names = await bus_stops_manager.get_stops(bus_number=bus_number, get_stop_name=True)
    except Exception as e:
        await send_message(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ user_information —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}.")
        return

    if role == "admin":
        await send_message(
            message, 
            (
                "<b>‚öôÔ∏è –î–∞–Ω–Ω—ã–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                f"<b>–ò–º—è:</b> {name}\n"
                f"<b>–†–æ–ª—å:</b> –ê–¥–º–∏–Ω\n"
                f"<b>–¢–≤–æ–π ID:</b> <code>{user_id}</code>"
            ),
            parse_mode=ParseMode.HTML
        )
    elif role == "driver":
        stops_list_str = "‚Äî " + "\n‚Äî ".join(stop_names) if stop_names else "–ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–ª–∏ –∞–≤—Ç–æ–±—É—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. C–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"
        if not stop_names:
            ConfigManager.log.logger.critical(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫.")

        await send_message(
            message,
            "<b>üöå –í–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"<b>–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è:</b> {name}\n"
            f"<b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞:</b> {f"<code>{bus_number}</code>" if bus_number else "–ê–≤—Ç–æ–±—É—Å –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω"}\n"
            f"<b>–†–æ–ª—å:</b> –í–æ–¥–∏—Ç–µ–ª—å\n"
            f"<b>–¢–≤–æ–π ID:</b> <code>{user_id}</code>\n\n"
            
            f"<b>üöè –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>\n"
            f"{stops_list_str}",
            parse_mode=ParseMode.HTML
        )
    else:
        await send_message(message, f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        ConfigManager.log.logger.critical(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–ª—å {role}.")

@router.message(Command("menu"), ExistsFilter())
async def get_contact(message: Message, user_manager: UserManager):
    user_id = message.from_user.id
    
    try:
        role, name = await user_manager.get_parameters(user_id=user_id, get_role=True, get_name=True)
    except Exception as e:
        await send_message(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ get_contact —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}.")
        return

    if role == "admin":
        await send_message(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_main_keyboard)
    elif role == "driver":
        await send_message(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=driver_main_keyboard)
    else:
        await send_message(message, f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        ConfigManager.log.logger.critical(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–ª—å {role}.")

@router.callback_query(F.data == "cancel", ExistsFilter())
async def cancel_action(event: Message | CallbackQuery, state: FSMContext):
    if state:
        await state.clear()
        
    if isinstance(event, CallbackQuery):
        await edit_message(event.message, "‚Ü©Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await send_message(event, "‚Ü©Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")