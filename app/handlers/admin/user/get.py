from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import UserManager, BusStopsManager, ConfigManager
from utils.text.processing import (
    validate_phone, 
    validate_bus_number, 
    parse_comma_list, 
    format_user_record, 
    normalize_identifier
)
from ....utils import send_message, edit_message
from ....keyboards.admin import (
    user_settings_keyboard,
    user_filters_keyboard,
    user_roles_filter_keyboard,
)
from ....states.admin import AdminUserStates
from ....filters import admin_filter


router = Router()

@router.message(F.text == "üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", admin_filter())
async def user_settings(message: Message):
    await send_message(
        message, 
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", 
        reply_markup=user_settings_keyboard
    )

@router.callback_query(F.data == "user:get_all", admin_filter())
async def cb_get_all_menu(query: CallbackQuery):
    await edit_message(
        query.message, 
        "üë• **–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫:", 
        reply_markup=user_filters_keyboard
    )

@router.callback_query(F.data == "user:get_all:all", admin_filter())
async def cb_get_all_all(query: CallbackQuery, user_manager: UserManager):
    try:
        users = await user_manager.get_users()
        if not users:
            await edit_message(query.message, "ü§∑‚Äç‚ôÇÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_lines = [
            format_user_record(u["name"], u["role"], u["phone_number"], u["user_id"], u["bus_number"]) 
            for u in users
        ]
        users_text = "\n".join(user_lines)
        text = f"‚úÖ **–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}**\n\n{users_text}"

        await edit_message(query.message, text)

    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "user:get_all:by_role_menu", admin_filter())
async def cb_get_all_by_role_menu(query: CallbackQuery):
    await edit_message(
        query.message,
        "üé≠ **–§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª—è–º**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=user_roles_filter_keyboard
    )

@router.callback_query(F.data.startswith("user:get_all:by_role:"), admin_filter())
async def cb_get_all_by_role_selected(query: CallbackQuery, user_manager: UserManager):
    role = query.data.split(":")[-1]
    
    role_name_ru = "–í–æ–¥–∏—Ç–µ–ª–∏" if role == "driver" else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"

    try:
        users = await user_manager.get_users(roles=[role])
        if not users:
            await edit_message(query.message, f"ü§∑‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é ¬´{role_name_ru}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        user_lines = [
            format_user_record(u["name"], u["role"], u["phone_number"], u["user_id"], u["bus_number"]) 
            for u in users
        ]
        users_text = "\n".join(user_lines)
        text = f"üë• **{role_name_ru} ({len(users)} —á–µ–ª.)**\n\n{users_text}"
        
        await edit_message(query.message, text)

    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏ '{role}'.")
        await edit_message(query.message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–æ–ª–∏ ¬´{role_name_ru}¬ª.")

@router.callback_query(F.data == "user:get_all:by_bus", admin_filter())
async def cb_get_all_by_bus_start(query: CallbackQuery, state: FSMContext, bus_stops_manager: BusStopsManager):
    try:
        bus_numbers = await bus_stops_manager.get_buses(get_bus_number=True)
        if not bus_numbers:
            await edit_message(query.message, "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            await state.clear()
            return
            
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞.")
        await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
        await state.clear()
        return

    await state.set_state(AdminUserStates.waiting_for_bus_filter)
    await edit_message(
        query.message,
        "üöå **–§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ–±—É—Å—É**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –∞–≤—Ç–æ–±—É—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: `12`, `45–ê`).\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã:** `{', '.join(f'`{number}`' for number in bus_numbers)}`"
    )

@router.message(AdminUserStates.waiting_for_bus_filter, admin_filter())
async def handle_bus_filter_input(message: Message, state: FSMContext, user_manager: UserManager):
    await state.clear()
    bus_numbers = parse_comma_list(message.text)

    for bus_number in bus_numbers:
        if not validate_bus_number(bus_number):
            await send_message(message, f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!** –ù–æ–º–µ—Ä ¬´{bus_number}¬ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

    try:
        users = await user_manager.get_users(bus_numbers=bus_numbers)
        if not users:
            await send_message(message, "ü§∑‚Äç‚ôÇÔ∏è –í–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        user_lines = [
            format_user_record(u["name"], u["role"], u["phone_number"], u["user_id"], u["bus_number"]) 
            for u in users
        ]
        users_text = "\n".join(user_lines)
        text = f"‚úÖ **–ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(users)}**\n\n{users_text}"
        
        await send_message(message, text)

    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä–∞–º –∞–≤—Ç–æ–±—É—Å–æ–≤: {bus_numbers}.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "user:get_info", admin_filter())
async def cb_get_user_info_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminUserStates.waiting_for_identifier)
    await edit_message(
        query.message, 
        "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ **Telegram ID** –∏–ª–∏ **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞** (–≤ —Ñ–æ—Ä–º–∞—Ç–µ `+996...`) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º."
    )

@router.message(AdminUserStates.waiting_for_identifier, admin_filter())
async def handle_get_user_info(message: Message, state: FSMContext, user_manager: UserManager):
    await state.clear()
    identifier = normalize_identifier(message.text)
    
    params = {
        'get_phone_number': True, 'get_user_id': True, 'get_role': True,
        'get_name': True, 'get_bus_number': True
    }
    
    try:
        if validate_phone(identifier) and "+" in message.text:
            result = await user_manager.get_parameters(phone_number=identifier, **params)
        elif identifier.isdigit():
            result = await user_manager.get_parameters(user_id=int(identifier), **params)
        else:
            await send_message(message, "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!** –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return

        if result is None:
            await send_message(message, "ü§∑‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        phone_number, user_id, role, name, bus_number = result

        await send_message(
            message, 
            f"**‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n\n"
            f"{format_user_record(name, role, phone_number, user_id, bus_number)}"
        )

    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É '{identifier}'.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")