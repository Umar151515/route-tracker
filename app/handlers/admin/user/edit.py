from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import UserManager, BusStopsManager, ConfigManager
from utils.text.processing import (
    validate_phone, 
    validate_bus_number, 
    validate_name,
    normalize_identifier
)
from utils.app import send_message, edit_message
from ....keyboards.admin import (
    get_user_edit_fields_keyboard,
)
from ....states.admin import AdminUserEditStates
from ....filters import admin_filter


router = Router()

@router.callback_query(F.data == "user:edit", admin_filter())
async def cb_edit_user_ask_identifier(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminUserEditStates.waiting_for_identifier)
    await edit_message(
        query.message, 
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ **Telegram ID** –∏–ª–∏ **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞** (–≤ —Ñ–æ—Ä–º–∞—Ç–µ `+996...`) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å."
    )

@router.message(AdminUserEditStates.waiting_for_identifier, admin_filter())
async def handle_edit_identifier(message: Message, state: FSMContext, user_manager: UserManager):
    identifier = normalize_identifier(message.text)
    user_id = None
    role = None

    try:
        if validate_phone(identifier) and "+" in message.text:
            if not await user_manager.user_exists(phone_number=identifier):
                await send_message(message, "‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                await state.clear()
                return
            user_id, role = await user_manager.get_parameters(phone_number=identifier, get_user_id=True, get_role=True)
        
        elif identifier.isdigit():
            user_id = int(identifier)
            if not await user_manager.user_exists(user_id=user_id):
                await send_message(message, "‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                await state.clear()
                return
            role = await user_manager.get_parameters(user_id=user_id, get_role=True)
            
        else:
            await send_message(message, "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!** –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            await state.clear()
            return

        if user_id == message.from_user.id:
            await send_message(message, "üö´ –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            await state.clear()
            return

    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: '{identifier}'.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return

    await state.update_data(identifier=message.text)
    await state.set_state(AdminUserEditStates.waiting_for_field)
    await send_message(
        message, 
        "‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω.**\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", 
        reply_markup=get_user_edit_fields_keyboard(role)
    )

@router.callback_query(F.data.startswith("user:edit:field:"), admin_filter())
async def cb_edit_field_choice(query: CallbackQuery, state: FSMContext, user_manager: UserManager, bus_stops_manager: BusStopsManager):
    field = query.data.split(":")[-1]

    data = await state.get_data()
    await state.update_data(field=field)
    identifier_raw = data.get("identifier")
    identifier = normalize_identifier(identifier_raw)

    try:
        if validate_phone(identifier) and "+" in identifier_raw:
            target_name = await user_manager.get_parameters(phone_number=identifier, get_name=True)
        else:
            target_name = await user_manager.get_parameters(user_id=int(identifier), get_name=True)
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{identifier}' –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.")
        await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return
    
    prompts = {
        "phone": "–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞** (–≤ —Ñ–æ—Ä–º–∞—Ç–µ `+996...`).",
        "name": "–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤–æ–µ –∏–º—è**.",
        "bus_number": "–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞**."
    }
    prompt = prompts.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

    if field == "bus_number":
        try:
            bus_numbers = await bus_stops_manager.get_buses(get_bus_number=True)
            if not bus_numbers:
                await edit_message(query.message, "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
                state.clear()
                return
        except Exception as e:
            ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤ –¥–ª—è cb_edit_field_choice.")
            await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            state.clear()
            return
        prompt += f"\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã:** `{', '.join(f'`{number}`' for number in bus_numbers)}`"
    
    await state.set_state(AdminUserEditStates.waiting_for_new_value)

    await edit_message(
        query.message, 
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_name}**\n\n{prompt}\n\n*–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `0`*"
    )

@router.message(AdminUserEditStates.waiting_for_new_value, admin_filter())
async def handle_edit_new_value(message: Message, state: FSMContext, user_manager: UserManager, bus_stops_manager: BusStopsManager):
    data = await state.get_data()
    identifier_raw = data.get("identifier")
    identifier = normalize_identifier(identifier_raw)
    field = data.get("field")
    new_value = message.text.strip()
    
    await state.clear()

    if new_value == "0":
        await send_message(message, "‚Ü©Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    if not identifier or not field:
        await send_message(message, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        kwargs_search = {}
        if validate_phone(identifier) and "+" in identifier_raw:
            kwargs_search["phone_number"] = identifier
        else:
            kwargs_search["user_id"] = int(identifier)

        kwargs_update = {}
        if field == "phone" and validate_phone(normalize_identifier(new_value)):
            kwargs_update["new_phone_number"] = normalize_identifier(new_value)
        elif field == "name" and validate_name(new_value):
            kwargs_update["new_name"] = new_value
        elif field == "bus_number" and validate_bus_number(new_value):
            try:
                bus_numbers = await bus_stops_manager.get_buses(get_bus_number=True)
                if new_value in bus_numbers:
                    kwargs_update["new_bus_number"] = new_value
                else:
                    await send_message(message, f"‚ùå –¢–∞–∫–æ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return
            except Exception as e:
                ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤ –¥–ª—è cb_edit_field_choice.")
                await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
                return
        else:
            await send_message(message, f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!** –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´{new_value}¬ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await user_manager.set_user(**kwargs_search, **kwargs_update)
        await send_message(message, "‚úÖ **–£—Å–ø–µ—à–Ω–æ!** –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è '{field}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{identifier}'.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç.")