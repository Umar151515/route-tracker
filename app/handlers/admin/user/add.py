from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import UserManager, BusStopsManager, ConfigManager
from utils.text.processing import (
    validate_phone, 
    validate_bus_number, 
    validate_name,
    normalize_identifier,
    translate_role
)
from ....utils import send_message, edit_message, delete_message
from ....keyboards.admin import user_add_role_keyboard
from ....states.admin import AdminUserAddStates
from ....filters import admin_filter


router = Router()

@router.callback_query(F.data == "user:add", admin_filter())
async def cb_add_user_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminUserAddStates.waiting_for_phone)
    await edit_message(
        query.message,
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞** –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ `+996...`):\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0*"
    )

@router.message(AdminUserAddStates.waiting_for_phone, admin_filter())
async def handle_add_user_phone(message: Message, state: FSMContext, user_manager: UserManager):
    phone = normalize_identifier(message.text.strip())
    
    if message.text.strip() == "0":
        await state.clear()
        await send_message(message, "‚Ü©Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    if not validate_phone(phone) or "+" not in message.text:
        await send_message(message, "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!** –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+996...`.")
        return
    
    try:
        if await user_manager.user_exists(phone_number=phone):
            await send_message(message, "‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.**")
            return
            
        await state.update_data(phone=phone)
        await state.set_state(AdminUserAddStates.waiting_for_name)
        await send_message(
            message,
            "‚úÖ **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç.**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ **–∏–º—è** –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            "*–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0*"
        )
        
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{phone}'")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

@router.message(AdminUserAddStates.waiting_for_name, admin_filter())
async def handle_add_user_name(message: Message, state: FSMContext):
    name = message.text.strip()
    
    if name == "0":
        await state.clear()
        await send_message(message, "‚Ü©Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    if not validate_name(name):
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏!")
        return
    
    await state.update_data(name=name)
    await state.set_state(AdminUserAddStates.waiting_for_role)
    await send_message(
        message,
        "‚úÖ **–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ.**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ **—Ä–æ–ª—å** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=user_add_role_keyboard
    )

@router.callback_query(F.data.startswith("user:add:role:"), admin_filter())
async def cb_add_user_role(query: CallbackQuery, state: FSMContext, bus_stops_manager: BusStopsManager):
    role = query.data.split(":")[-1]
    data = await state.get_data()
    
    await state.update_data(role=role)
    
    if role == "driver":
        try:
            bus_numbers = await bus_stops_manager.get_buses(get_bus_number=True)
            if not bus_numbers:
                await edit_message(query.message, "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è.")
                await state.clear()
                return
                
            await state.set_state(AdminUserAddStates.waiting_for_bus_number)
            await edit_message(
                query.message,
                f"üéØ **–†–æ–ª—å: –í–æ–¥–∏—Ç–µ–ª—å**\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞** –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:\n\n"
                f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã:** `{', '.join(f'`{number}`' for number in bus_numbers)}`\n\n"
                f"*–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0*"
            )
        except Exception as e:
            ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è")
            await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            await state.clear()
    else:
        await finish_user_creation(query.message, state, bus_number="")

async def finish_user_creation(message: Message, state: FSMContext, bus_number: str | None = None):
    data = await state.get_data()
    phone = data.get("phone")
    name = data.get("name")
    role = data.get("role")
    user_manager = await UserManager.create()
    
    try:
        await user_manager.create_user(
            phone_number=phone,
            role=role,
            name=name,
            bus_number=bus_number
        )
        
        bus_info = f"**–ê–≤—Ç–æ–±—É—Å:** {bus_number}" if role == "driver" else ""
        if role == "admin":
            await delete_message(message)
        
        ConfigManager.log.logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ID - {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}")

        await send_message(
            message,
            f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"**–ò–º—è:** {name}\n"
            f"**–¢–µ–ª–µ—Ñ–æ–Ω:** `+{phone}`\n"
            f"**–†–æ–ª—å:** {translate_role(role)}\n"
            f"{bus_info}"
        )
        await state.clear()
        
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {phone}, {name}, {role}, {bus_number}")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()

@router.message(AdminUserAddStates.waiting_for_bus_number, admin_filter())
async def handle_add_user_bus_number(message: Message, state: FSMContext, bus_stops_manager: BusStopsManager):
    bus_number = message.text.strip()
    
    if bus_number == "0":
        await state.clear()
        await send_message(message, "‚Ü©Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    if not validate_bus_number(bus_number):
        await send_message(message, "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞!**")
        return
    
    try:
        bus_numbers = await bus_stops_manager.get_buses(get_bus_number=True)
        if bus_number not in bus_numbers:
            await send_message(message, f"‚ùå **–ê–≤—Ç–æ–±—É—Å —Å –Ω–æ–º–µ—Ä–æ–º '{bus_number}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
            
        await finish_user_creation(message, state, bus_number)
        
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–±—É—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{bus_number}'")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞.")
