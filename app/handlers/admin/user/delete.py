from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import UserManager, ConfigManager
from utils.text.processing import translate_role
from utils.text.processing import validate_phone, normalize_identifier
from ....utils import send_message, edit_message
from ....keyboards.admin import user_delete_confirm_keyboard
from ....states.admin import AdminUserDeleteStates
from ....filters import admin_filter


router = Router()

@router.callback_query(F.data == "user:delete", admin_filter())
async def cb_delete_user_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminUserDeleteStates.waiting_for_identifier)
    await edit_message(
        query.message,
        "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ **Telegram ID** –∏–ª–∏ **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞** (–≤ —Ñ–æ—Ä–º–∞—Ç–µ `+996...`) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `0`*"
    )

@router.message(AdminUserDeleteStates.waiting_for_identifier, admin_filter())
async def handle_delete_user_identifier(message: Message, state: FSMContext, user_manager: UserManager):
    identifier = normalize_identifier(message.text.strip())
    
    if message.text.strip() == "0":
        await state.clear()
        await send_message(message, "‚Ü©Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    try:
        user_exists = False
        user_info = None
        
        if validate_phone(identifier) and "+" in message.text:
            user_exists = await user_manager.user_exists(phone_number=identifier)
            if user_exists:
                user_info = await user_manager.get_parameters(
                    phone_number=identifier, 
                    get_user_id=True, get_name=True, get_role=True, get_bus_number=True
                )
        elif identifier.isdigit():
            user_exists = await user_manager.user_exists(user_id=int(identifier))
            if user_exists:
                user_info = await user_manager.get_parameters(
                    user_id=int(identifier),
                    get_phone_number=True, get_name=True, get_role=True, get_bus_number=True
                )
        else:
            await send_message(message, "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!** –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return
        
        if not user_exists or not user_info:
            await send_message(message, "‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!**")
            await state.clear()
            return
        
        if validate_phone(identifier) and "+" in message.text:
            user_id, role, name, bus_number = user_info
            phone_number = identifier
        else:
            phone_number, role, name, bus_number = user_info
            user_id = int(identifier)
        
        if user_id == message.from_user.id:
            await send_message(message, "üö´ **–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!**")
            await state.clear()
            return
        
        await state.update_data(
            identifier=message.text,
            user_id=user_id,
            phone_number=phone_number,
            name=name,
            role=role,
            bus_number=bus_number
        )
        
        bus_info = f"\n**–ê–≤—Ç–æ–±—É—Å:** {bus_number}" if role == "driver" else ""
        
        await send_message(
            message,
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"**–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?**\n\n"
            f"**–ò–º—è:** {name}\n"
            f"**–¢–µ–ª–µ—Ñ–æ–Ω:** `+{phone_number}`\n"
            f"**User ID:** `{user_id}`\n"
            f"**–†–æ–ª—å:** {translate_role(role)}{bus_info}",
            reply_markup=user_delete_confirm_keyboard
        )
        
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: '{identifier}'")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()

@router.callback_query(F.data == "user:delete:confirm", admin_filter())
async def cb_delete_user_confirm(query: CallbackQuery, state: FSMContext, user_manager: UserManager):
    data = await state.get_data()
    identifier_raw = data.get("identifier")
    name = data.get("name")
    
    try:
        identifier = normalize_identifier(identifier_raw)
        
        if validate_phone(identifier) and "+" in identifier_raw:
            await user_manager.delete_user(phone_number=identifier)
        else:
            await user_manager.delete_user(user_id=int(identifier))
        
        ConfigManager.log.logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ID - {query.from_user.id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}")
        await edit_message(
            query.message,
            f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**"
        )
        await state.clear()
        
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{identifier_raw}'")
        await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()

@router.callback_query(F.data == "user:delete:cancel", admin_filter())
async def cb_delete_user_cancel(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await edit_message(query.message, "‚Ü©Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")