from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

from core.managers import GoogleSheetsManager, ConfigManager
from utils.app import send_message, edit_message
from ....states.admin import AdminSheetsStates
from ....filters import admin_filter


router = Router()

@router.callback_query(F.data == "sheets:get_data", admin_filter())
async def cb_get_data_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminSheetsStates.waiting_for_days_to_get)
    await edit_message(
        query.message,
        "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã\n\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏:\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 7 (–ø–æ–∫–∞–∂–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)\n"
        "üí° –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"
    )

@router.message(AdminSheetsStates.waiting_for_days_to_get, admin_filter())
async def handle_get_data(
    message: Message,
    state: FSMContext,
    sheets_manager: GoogleSheetsManager
):
    days_str = message.text.strip()
    await state.clear()

    try:
        if not days_str or days_str == "0":
            days = None
            days_text = "–≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
        else:
            days = int(days_str)
            if days <= 0:
                await send_message(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
            days_text = f"{days} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π"
    except ValueError:
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    try:
        data = await sheets_manager.get_last_n_days_data(days)

    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
        return

    if not data:
        text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        header = data[0]
        records = data[1:]
        
        text = (
            f"üìä <b>–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ({days_text})</b>\n"
            f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{len(records)}</b>\n\n"
        )

        header_text = " | ".join(f"<b>{h}</b>" for h in header)
        text += f"üßæ <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏:</b>\n{header_text}\n\n"

        for i, record in enumerate(records, 1):
            row_text = "\n".join(
                [f"<b>{header[j]}:</b> {record[j]}" for j in range(len(header))]
            )
            text += f"üîπ <b>–ó–∞–ø–∏—Å—å {i}</b>\n{row_text}\n\n"

    await send_message(message, text, parse_mode=ParseMode.HTML)
