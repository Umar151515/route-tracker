from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import GoogleSheetsManager, ConfigManager
from utils.app import send_message, edit_message
from ....keyboards.admin import sheets_settings_keyboard, confirm_delete_keyboard
from ....states.admin import AdminSheetsStates
from ....filters import admin_filter


router = Router()

@router.message(F.text == "üìÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã", admin_filter())
async def sheets_settings(message: Message):
    await send_message(message, "üìÑ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü", reply_markup=sheets_settings_keyboard)

@router.callback_query(F.data == "sheets:delete_data", admin_filter())
async def cb_delete_data_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminSheetsStates.waiting_for_days_to_delete)
    await edit_message(
        query.message,
        "üóë –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã\n\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å –Ω–∞—á–∞–ª–∞ —Ç–∞–±–ª–∏—Ü—ã):\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 7 (—É–¥–∞–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π)\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )

@router.message(AdminSheetsStates.waiting_for_days_to_delete, admin_filter())
async def handle_delete_data(
    message: Message,
    state: FSMContext,
    sheets_manager: GoogleSheetsManager
):
    days_str = message.text.strip()

    if days_str.isdigit():
        days = int(days_str)
        if days <= 0:
            await send_message(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            await state.clear()
            return
    else:
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        await state.clear()
        return
    try:
        current_data = await sheets_manager.get_last_n_days_data()
        if not current_data or len(current_data) <= 1:
            await send_message(message, "‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await state.clear()
            return
        
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã.")
        await state.clear()

    unique_dates = set()
    for row in current_data[1:]:
        if len(row) > 0 and row[0]:
            unique_dates.add(row[0])
    
    total_days = len(unique_dates)
    
    if days > total_days:
        await send_message(
            message, 
            f"‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –≤—Å–µ–≥–æ {total_days} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö. –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å {days} –¥–Ω–µ–π."
        )
        await state.clear()
        return

    await state.update_data(
        days_to_delete=days, 
        total_days=total_days,
        records_count=len(current_data) - 1,
        admin_id=message.from_user.id
    )
    
    await state.set_state(AdminSheetsStates.confirm_delete)
    
    await send_message(
        message,
        f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n"
        f"üìÖ –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–≤—ã–µ {days} –¥–Ω–µ–π\n"
        f"üìä –í—Å–µ–≥–æ –¥–Ω–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {total_days}\n"
        f"üìù –ó–∞–ø–∏—Å–µ–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: {len(current_data) - 1}\n\n"
        f"‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_delete_keyboard
    )

@router.callback_query(F.data == "sheets:confirm_delete:yes", AdminSheetsStates.confirm_delete, admin_filter())
async def handle_confirm_delete_yes(
    query: CallbackQuery,
    state: FSMContext,
    sheets_manager: GoogleSheetsManager
):
    data = await state.get_data()
    days = data.get('days_to_delete')
    admin_id = data.get('admin_id')
    records_count = data.get('records_count')
    
    await state.clear()

    try:
        ConfigManager.log.logger.info(
            f"üõë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ID: {admin_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã. "
            f"–£–¥–∞–ª—è–µ—Ç—Å—è {days} –¥–Ω–µ–π, –∑–∞–ø–∏—Å–µ–π: {records_count}"
        )
        
        await sheets_manager.clear_first_n_days(days)
        
        await edit_message(
            query.message,
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!\n\n"
            f"üóë –£–¥–∞–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {days} –¥–Ω–µ–π\n"
            f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {records_count}\n"
            f"üìÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"
        )
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ID: {admin_id}")
        await edit_message(query.message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.\n")