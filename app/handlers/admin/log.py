from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from core.managers import ConfigManager
from utils.app import send_message, edit_message
from ...keyboards.admin import logs_settings_keyboard
from ...filters import admin_filter


router = Router()

@router.message(F.text == "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", admin_filter())
async def logs_settings(message: Message):
    await send_message(message, "üîë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã", reply_markup=logs_settings_keyboard)

@router.callback_query(F.data == "logs:show", admin_filter())
async def cb_show_logs(query: CallbackQuery):
    try:
        logs_content = ConfigManager.log.get_logs()
        
        if not logs_content:
            await edit_message(query.message, "üì≠ –õ–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç.")
            return

        if len(logs_content) > 4000:
            try:
                log_file = FSInputFile(ConfigManager.log.log_file, filename="system_logs.txt")
                await query.message.answer_document(log_file, caption="üìÅ –õ–æ–≥-—Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º—ã")
                await query.message.delete()
            except Exception as e:
                ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–∞.")
                await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–∞.")
        else:
            await edit_message(query.message, f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-—Ñ–∞–π–ª–∞:\n\n```\n{logs_content}\n```")
            
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.")
        await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.")

@router.callback_query(F.data == "logs:clear", admin_filter())
async def cb_clear_logs(query: CallbackQuery):
    try:
        ConfigManager.log.clear_logs()
        ConfigManager.log.logger.info(f"–ê–¥–º–∏–Ω ID: {query.from_user.id} –æ—á–∏—Å—Ç–∏–ª –ª–æ–≥–∏")
        await edit_message(query.message, "‚úÖ –õ–æ–≥-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤.")
        await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤.")