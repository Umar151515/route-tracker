from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import BusStopsManager, ConfigManager
from utils.text.processing import validate_bus_number
from ....utils import send_message, edit_message
from ....filters import admin_filter
from ....states.admin import AdminStopRemoveStates


router = Router()

@router.callback_query(F.data == "bus:remove_stop", admin_filter())
async def cb_remove_stop_start(
    query: CallbackQuery,
    state: FSMContext,
    bus_stops_manager: BusStopsManager
):
    try:
        bus_numbers = await bus_stops_manager.get_buses(get_bus_number=True)
        if not bus_numbers:
            await edit_message(query.message, "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            return
    except Exception as e:
        bus_numbers = ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤"]
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤.")

    await state.set_state(AdminStopRemoveStates.waiting_for_bus_number_for_remove_stop)
    await edit_message(
        query.message,
        "‚ûñ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 12 –∏–ª–∏ 45–ê\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã:** `{', '.join(f'`{number}`' for number in bus_numbers)}`"
    )

@router.message(AdminStopRemoveStates.waiting_for_bus_number_for_remove_stop, admin_filter())
async def handle_remove_stop_bus_number(message: Message, state: FSMContext, bus_stops_manager: BusStopsManager):
    bus_number = message.text.strip()

    if not validate_bus_number(bus_number):
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞.")
        await state.clear()
        return

    try:
        if not await bus_stops_manager.bus_exists(bus_number=bus_number):
            await send_message(message, f"‚ùå –ê–≤—Ç–æ–±—É—Å —Å –Ω–æ–º–µ—Ä–æ–º '{bus_number}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        stops = await bus_stops_manager.get_stops(bus_number=bus_number, get_stop_name=True, get_stop_order=True)
        if not stops:
            await send_message(message, f"‚ùå –í –∞–≤—Ç–æ–±—É—Å–µ '{bus_number}' –Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–æ–∫.")
            await state.clear()
            return

        stops_text = "\n".join([f"{stop[1]}. {stop[0]}" for stop in stops])
        await state.update_data(bus_number=bus_number)
        await state.set_state(AdminStopRemoveStates.waiting_for_stop_order_for_remove)
        await send_message(
            message,
            f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–±—É—Å–∞ {bus_number}:\n{stops_text}\n\n"
            "‚ûñ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        )
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∞–≤—Ç–æ–±—É—Å–∞ {bus_number}")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫.")
        await state.clear()

@router.message(AdminStopRemoveStates.waiting_for_stop_order_for_remove, admin_filter())
async def handle_remove_stop_order(message: Message, state: FSMContext, bus_stops_manager: BusStopsManager):
    data = await state.get_data()
    bus_number = data.get('bus_number')
    stop_order_str = message.text.strip()

    await state.clear()

    try:
        max_stop_order = len(await bus_stops_manager.get_stops(bus_number=bus_number, get_stop_id=True))
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∞–≤—Ç–æ–±—É—Å–∞ {bus_number}")
        await send_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∞–≤—Ç–æ–±—É—Å–∞.")
        return

    if stop_order_str.isdigit():
        stop_order = int(stop_order_str)
        if stop_order <= 0:
            await send_message(message, "‚ùå –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        elif stop_order > max_stop_order:
            await send_message(message, "‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return
    else:
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")

    try:
        await bus_stops_manager.delete_stop(bus_number=bus_number, stop_order=stop_order)
        await send_message(message, f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {stop_order} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–≤—Ç–æ–±—É—Å–∞ '{bus_number}'!")
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ –∞–≤—Ç–æ–±—É—Å–∞ '{bus_number}' –ø–æ –ø–æ—Ä—è–¥–∫—É {stop_order}.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")