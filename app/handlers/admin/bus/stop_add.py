from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import BusStopsManager, ConfigManager
from utils.text.processing import validate_bus_number, validate_stop_name
from utils.app import send_message, edit_message
from ....filters import admin_filter
from ....states.admin import AdminStopAddStates


router = Router()

@router.callback_query(F.data == "bus:add_stop", admin_filter())
async def cb_add_stop_start(
    query: CallbackQuery, 
    state: FSMContext, 
    bus_stops_manager: BusStopsManager
):
    try:
        bus_numbers = await bus_stops_manager.get_buses(get_bus_number=True)
        if not bus_numbers:
            await edit_message(query.message, "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            return
    except Exception as e:
        bus_numbers = ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤"]
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤.")

    await state.set_state(AdminStopAddStates.waiting_for_bus_number_for_add_stop)
    await edit_message(
        query.message,
        "‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã:** `{', '.join(f'`{number}`' for number in bus_numbers)}`\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `0`*"
    )

@router.message(AdminStopAddStates.waiting_for_bus_number_for_add_stop, admin_filter())
async def handle_add_stop_bus_number(message: Message, state: FSMContext, bus_stops_manager: BusStopsManager):
    bus_number = message.text.strip()

    if bus_number == "0":
        await state.clear()
        await send_message(message, "‚Ü©Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if not validate_bus_number(bus_number):
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    try:
        if not await bus_stops_manager.bus_exists(bus_number=bus_number):
            await send_message(message, f"‚ùå –ê–≤—Ç–æ–±—É—Å —Å –Ω–æ–º–µ—Ä–æ–º '{bus_number}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–±—É—Å–∞ {bus_number}.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–±—É—Å–∞.")
        await state.clear()
        return

    await state.update_data(bus_number=bus_number)
    await state.set_state(AdminStopAddStates.waiting_for_stop_name)
    await send_message(
        message, 
        "üõë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `0`*"
    )

@router.message(AdminStopAddStates.waiting_for_stop_name, admin_filter())
async def handle_add_stop_name(
    message: Message,
    state: FSMContext,
    bus_stops_manager: BusStopsManager
):
    stop_name = message.text.strip()
    data = await state.get_data()

    if stop_name == "0":
        await state.clear()
        await send_message(message, "‚Ü©Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if not validate_stop_name(stop_name):
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    try:
        stops = await bus_stops_manager.get_stops(bus_number=data.get('bus_number'), get_stop_name=True)
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–±—É—Å–∞: {data.get('bus_number')}.")
        stops = ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫"]

    stops_list = "\n".join([f"{i+1}. {stop}" for i, stop in enumerate(stops)])

    await state.update_data(stop_name=stop_name)
    await state.set_state(AdminStopAddStates.waiting_for_stop_order)
    await send_message(
        message,
        "üî¢ –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ -1, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü):\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 1 (–¥–ª—è –ø–µ—Ä–≤–æ–π) –∏–ª–∏ -1 (–≤ –∫–æ–Ω–µ—Ü)\n\n"
        f"–û—Å—Ç–∞–Ω–æ–≤–∫–∏: \n{stops_list}\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `0`*"
    )

@router.message(AdminStopAddStates.waiting_for_stop_order, admin_filter())
async def handle_add_stop_order(message: Message, state: FSMContext, bus_stops_manager: BusStopsManager):
    data = await state.get_data()
    bus_number = data.get('bus_number')
    stop_name = data.get('stop_name')
    stop_order_str = message.text.strip()

    if stop_order_str == "0":
        await state.clear()
        await send_message(message, "‚Ü©Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if stop_order_str == '-1':
        stop_order = None
    elif stop_order_str.isdigit():
        stop_order = int(stop_order_str)
        if stop_order <= 0:
            await send_message(message, "‚ùå –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    else:
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    try:
        await bus_stops_manager.create_stop(bus_number=bus_number, stop_name=stop_name, stop_order=stop_order)
        order_text = "–≤ –∫–æ–Ω–µ—Ü" if stop_order is None else f"–ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {stop_order}"
        await send_message(message, f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ '{stop_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞–≤—Ç–æ–±—É—Å '{bus_number}' {order_text}!")
        await state.clear()
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ '{stop_name}' –≤ –∞–≤—Ç–æ–±—É—Å '{bus_number}'.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        await state.clear()