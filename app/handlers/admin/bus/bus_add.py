from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import BusStopsManager, ConfigManager
from utils.text.processing import validate_bus_number, validate_stop_name
from utils.app import send_message, edit_message
from ....states.admin import AdminBusAddStates
from ....filters import admin_filter


router = Router()

@router.callback_query(F.data == "bus:add", admin_filter())
async def cb_add_bus_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminBusAddStates.waiting_for_bus_number)
    await edit_message(
        query.message,
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞**\n\n"
        "üöå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞:\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 12 –∏–ª–∏ 45–ê\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ: 0"
    )

@router.message(AdminBusAddStates.waiting_for_bus_number, admin_filter())
async def handle_add_bus_number(
    message: Message, 
    state: FSMContext, 
    bus_stops_manager: BusStopsManager
):
    bus_number = message.text.strip()

    if bus_number == "0":
        await send_message(message, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    if not validate_bus_number(bus_number):
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    try:
        if await bus_stops_manager.bus_exists(bus_number=bus_number):
            await send_message(message, f"‚ùå –ê–≤—Ç–æ–±—É—Å —Å –Ω–æ–º–µ—Ä–æ–º '{bus_number}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:")
            return

    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–±—É—Å–∞ {bus_number}")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–±—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        await state.clear()

    await state.update_data(bus_number=bus_number, stops=[])
    await state.set_state(AdminBusAddStates.waiting_for_stops)
    await send_message(
        message,
        f"‚úÖ –ù–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞ '{bus_number}' –ø—Ä–∏–Ω—è—Ç!\n\n"
        "üõë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
        "üí° **–ü—Ä–∏–º–µ—Ä:** –ú–æ—Å—Å–æ–≤–µ—Ç, 3-—è –≥–æ—Ä –±–æ–ª—å–Ω–∏—Ü–∞, –í–µ—Ñ–∞\n\n"
        "üìù **–ü—Ä–∞–≤–∏–ª–∞ –≤–≤–æ–¥–∞:**\n"
        "‚Ä¢ –†–∞–∑–¥–µ–ª—è–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—è—Ç—ã–º–∏\n"
        "‚Ä¢ –ö–∞–∂–¥–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∑–∞ —Ä–∞–∑\n\n"
        "‚û°Ô∏è **–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏:**\n"
        "‚Ä¢ '0' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞"
    )

@router.message(AdminBusAddStates.waiting_for_stops, admin_filter())
async def handle_add_bus_stops(
    message: Message, 
    state: FSMContext, 
    bus_stops_manager: BusStopsManager
):
    user_input = message.text.strip()
    data = await state.get_data()
    bus_number = data.get('bus_number')
    stops: list = data.get('stops', [])

    if user_input == "0":
        if not stops:
            await send_message(message, "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–±—É—Å –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await state.clear()
            return

        try:
            await bus_stops_manager.create_bus(bus_number)
            
            for stop_order, stop_name in enumerate(stops, 1):
                await bus_stops_manager.create_stop(
                    bus_number=bus_number, 
                    stop_name=stop_name.strip(), 
                    stop_order=stop_order
                )
        except Exception as e:
            ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞ {bus_number} —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏.")
            await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞.")
            await state.clear()
            return
    
        stops_list = "\n".join([f"{i+1}. {stop}" for i, stop in enumerate(stops)])
        await send_message(
            message,
            f"‚úÖ **–ê–≤—Ç–æ–±—É—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üöå **–ù–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞:** {bus_number}\n"
            f"üõë **–î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫:** {len(stops)}\n\n"
            f"**–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫:**\n{stops_list}"
        )
        await state.clear()

        return

    new_stops = [stop.strip() for stop in user_input.split(",") if stop.strip()]
    valid_stops = []
    invalid_stops = []

    for stop in new_stops:
        if validate_stop_name(stop):
            valid_stops.append(stop)
        else:
            invalid_stops.append(stop)

    stops.extend(valid_stops)
    await state.update_data(stops=stops)

    response_parts = []
    
    if valid_stops:
        response_parts.append(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: {len(valid_stops)}")
        if len(valid_stops) <= 5:
            response_parts.append("\n".join([f"‚Ä¢ {stop}" for stop in valid_stops]))
    
    if invalid_stops:
        response_parts.append(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è ({len(invalid_stops)}):")
        response_parts.append("\n".join([f"‚Ä¢ {stop}" for stop in invalid_stops]))
        response_parts.append("\nüí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å–Ω–æ–≤–∞:")

    response_parts.append(f"\nüìä –í—Å–µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: {len(stops)}")
    
    if stops:
        current_stops = "\n".join([f"{i+1}. {stop}" for i, stop in enumerate(stops)])
        response_parts.append(f"\n–¢–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç:\n{current_stops}")

    response_parts.append(
        f"\n‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏:\n"
        f"‚Ä¢ '0' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞\n"
        f"‚Ä¢ '–æ—Ç–º–µ–Ω–∞' - –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ"
    )

    await send_message(message, "\n".join(response_parts), parse_mode=None)