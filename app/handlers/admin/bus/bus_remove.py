from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import BusStopsManager, ConfigManager
from utils.text.processing import validate_bus_number
from ....utils import send_message, edit_message
from ....states.admin import AdminBusRemoveStates
from ....filters import admin_filter


router = Router()

@router.callback_query(F.data == "bus:remove", admin_filter())
async def cb_remove_bus_start(
    query: CallbackQuery,
    state: FSMContext,
    bus_stops_manager: BusStopsManager
):  
    try:
        bus_numbers = await bus_stops_manager.get_buses(get_bus_number=True)
        if not bus_numbers:
            await edit_message(query.message, "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            return
    except Exception as e:
        bus_numbers = ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤"]
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤.")

    await state.set_state(AdminBusRemoveStates.waiting_for_bus_number_for_remove)
    await edit_message(
        query.message,
        "üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 12 –∏–ª–∏ 45–ê\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã:** `{', '.join(f'`{number}`' for number in bus_numbers)}`"
    )

@router.message(AdminBusRemoveStates.waiting_for_bus_number_for_remove, admin_filter())
async def handle_remove_bus(message: Message, state: FSMContext, bus_stops_manager: BusStopsManager):
    bus_number = message.text.strip()
    await state.clear()

    if not validate_bus_number(bus_number):
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞.")
        return

    try:
        if not await bus_stops_manager.bus_exists(bus_number=bus_number):
            await send_message(message, f"‚ùå –ê–≤—Ç–æ–±—É—Å —Å –Ω–æ–º–µ—Ä–æ–º '{bus_number}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await bus_stops_manager.delete_bus(bus_number=bus_number)
        await send_message(message, f"‚úÖ –ê–≤—Ç–æ–±—É—Å '{bus_number}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞ {bus_number}.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞.")