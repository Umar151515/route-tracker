from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.managers import BusStopsManager, ConfigManager
from utils.text.processing import validate_bus_number
from utils.app import send_message, edit_message
from ....keyboards.admin import bus_settings_keyboard
from ....states.admin import AdminBusInfoStates
from ....filters import admin_filter


router = Router()

@router.message(F.text == "üöå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–±—É—Å–æ–≤", admin_filter())
async def bus_settings(message: Message):
    await send_message(message, "üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–∞–º–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏", reply_markup=bus_settings_keyboard)

@router.callback_query(F.data == "bus:get_all", admin_filter())
async def cb_get_all_buses(query: CallbackQuery, bus_stops_manager: BusStopsManager):
    try:
        buses = await bus_stops_manager.get_buses(get_bus_number=True)
        if not buses:
            await edit_message(query.message, "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            return
        
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤.")
        await edit_message(query.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤.")

    text_parts = [f"–í—Å–µ–≥–æ –∞–≤—Ç–æ–±—É—Å–æ–≤: {len(buses)}:"]
        
    for bus in buses:
        try:
            stops = await bus_stops_manager.get_stops(
                bus_number=bus, 
                get_stop_name=True, 
                get_stop_order=True
            )
            
            if stops:
                stops_list = [f"  {stop[1]}. {stop[0]}" for stop in stops]
                stops_text = "\n".join(stops_list)
                text_parts.append(f"\n\nüöå –ê–≤—Ç–æ–±—É—Å {bus}:\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:\n{stops_text}")
            else:
                text_parts.append(f"\n\nüöå –ê–≤—Ç–æ–±—É—Å {bus}:\n‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                
        except Exception as e:
            ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–±—É—Å–∞ {bus}.")
            text_parts.append(f"\nüöå –ê–≤—Ç–æ–±—É—Å {bus}:\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    full_text = "".join(text_parts)
    await edit_message(query.message, full_text)

@router.callback_query(F.data == "bus:get_info", admin_filter())
async def cb_get_bus_info_start(query: CallbackQuery, state: FSMContext, bus_stops_manager: BusStopsManager):
    try:
        bus_numbers = await bus_stops_manager.get_buses(get_bus_number=True)
        if not bus_numbers:
            await edit_message(query.message, "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            return
    except Exception as e:
        bus_numbers = ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤"]
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤.")
    
    await state.set_state(AdminBusInfoStates.waiting_for_bus_number)
    await edit_message(
        query.message,
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 12 –∏–ª–∏ 45–ê\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã:** `{', '.join(f'`{number}`' for number in bus_numbers)}`"
    )

@router.message(AdminBusInfoStates.waiting_for_bus_number, admin_filter())
async def handle_get_bus_info(message: Message, state: FSMContext, bus_stops_manager: BusStopsManager):
    bus_number = message.text.strip()
    await state.clear()

    if not validate_bus_number(bus_number):
        await send_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞.")
        return

    try:
        if not await bus_stops_manager.bus_exists(bus_number=bus_number):
            await send_message(message, f"‚ùå –ê–≤—Ç–æ–±—É—Å —Å –Ω–æ–º–µ—Ä–æ–º '{bus_number}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        stops = await bus_stops_manager.get_stops(bus_number=bus_number, get_stop_name=True, get_stop_order=True)
        
        if not stops:
            text = f"üöå –ê–≤—Ç–æ–±—É—Å {bus_number}\n\n‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
        else:
            stops_list = [f"{stop[1]}. {stop[0]}" for stop in stops]
            text = f"üöå –ê–≤—Ç–æ–±—É—Å {bus_number}\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:\n" + "\n".join(stops_list)

        await send_message(message, text)
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–±—É—Å–µ {bus_number}.")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–±—É—Å–µ.")