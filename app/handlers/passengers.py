from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from core.managers import UserManager
from core.managers import BusStopsManager
from core.managers import ConfigManager
from core.managers import GoogleSheetsManager
from utils.app import send_message, edit_message
from ..keyboards import get_stops_keyboard
from ..filters import driver_filter


router = Router()

@router.message(Command("delete_last_entry"), driver_filter())
@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å", driver_filter())
async def delete_last_entry(message: Message, sheets_manager: GoogleSheetsManager):
    user_id = message.from_user.id
    
    if not await sheets_manager.was_last_registration_today(user_id):
        await send_message(message, f"‚ùó –î–∞–ª—å—à–µ –≤—ã —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏", None)
        return
    
    user_id = message.from_user.id

    try:
        await sheets_manager.delete_nth_last_driver_entry(user_id)
    except Exception as e:
        await send_message(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}.")
        return
    
    await send_message(message, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

@router.message(lambda message: message.text.isdigit(), driver_filter())
async def register_passengers(
    message: Message, 
    user_manager: UserManager,
    bus_stops_manager: BusStopsManager,
):
    user_id = message.from_user.id
    
    try:
        passenger_count = int(message.text)
    except ValueError:
        await send_message(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.", True)
        return

    if passenger_count < 0 or passenger_count > 200:
        await send_message(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 200.", True)
        return
    
    try:
        bus_number = await user_manager.get_parameters(user_id=user_id, get_bus_number=True)
        
        if not bus_number:
            await send_message(
                message,
                "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–±—É—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply=True
            )
            ConfigManager.log.logger.warning(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–±—É—Å")
            return
        
        if not await bus_stops_manager.bus_exists(bus_number=bus_number):
            await send_message(
                message,
                f"‚ùå –ê–≤—Ç–æ–±—É—Å '{bus_number}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply=True
            )
            ConfigManager.log.logger.error(f"‚ö†Ô∏è –ê–≤—Ç–æ–±—É—Å '{bus_number}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        stops = await bus_stops_manager.get_stops(bus_number=bus_number, get_stop_id=True)
        if not stops:
            await send_message(
                message,
                f"‚ùå –î–ª—è –∞–≤—Ç–æ–±—É—Å–∞ '{bus_number}' –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply=True
            )
            ConfigManager.log.logger.error(f"‚ö†Ô∏è –£ –∞–≤—Ç–æ–±—É—Å–∞ '{bus_number}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–æ–∫")
            return

    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
        await send_message(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply=True
        )
        return

    try:
        await send_message(
            message,
            "üõë –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É:",
            reply=True,
            reply_markup=await get_stops_keyboard(
                bus_number,
                passenger_count
            )
        )
    except Exception as e:
        ConfigManager.log.logger.error(f"{e}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
        await send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫.", reply=True)

@router.callback_query(F.data.startswith("register_passengers_"), driver_filter())
async def handle_register_passengers(
    callback: CallbackQuery, 
    user_manager: UserManager,
    bus_stops_manager: BusStopsManager, 
    sheets_manager: GoogleSheetsManager
):
    try:
        user_id = callback.from_user.id
        stop_id, passenger_count = map(int, callback.data.replace("register_passengers_", "").split("_"))
        driver_name, bus_number = await user_manager.get_parameters(user_id=user_id, get_name=True, get_bus_number=True)
        stop_name = await bus_stops_manager.get_stop(stop_id, get_stop_name=True)
    
    except Exception as e:
        await edit_message(callback.message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ handle_register_passengers. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    try:
        await sheets_manager.add_row(
            user_id,
            driver_name,
            bus_number,
            stop_name,
            passenger_count
        )
    except Exception as e:
        await edit_message(callback.message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ. –ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {driver_name}. –°–±–æ–π –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ/–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return

    await edit_message(
        callback.message,
        f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {stop_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –í–æ—à–ª–æ {passenger_count} –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤."
    )