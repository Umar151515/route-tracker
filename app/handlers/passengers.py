from aiogram import F, Router
from aiogram.types import Message, CallbackQuery

from core.managers import UserManager
from core.managers import BusStopsManager
from core.managers import ConfigManager
from core.managers import GoogleSheetsManager
from ..core.services import UserService
from ..utils import send_message, edit_message
from ..keyboards import get_stops_keyboard


router = Router()

@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å")
async def delete_last_entry(
    message: Message,
    user_service: UserService, 
    sheets_manager: GoogleSheetsManager
):
    user_id = message.from_user.id

    if not await user_service.check_user_role(user_id, "driver"):
        return
    
    if not await sheets_manager.was_last_registration_today(user_id):
        await send_message(message, f"‚ùó –î–∞–ª—å—à–µ –≤—ã —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏", None)
        return
    
    user_id = message.from_user.id

    try:
        await sheets_manager.delete_nth_last_driver_entry(user_id)
    except Exception as e:
        await send_message(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}.")
        return
    
    await send_message(message, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

@router.message(F.text)
async def register_passengers(
    message: Message, 
    user_manager: UserManager,
    bus_stops_manager: BusStopsManager, 
    user_service: UserService
):
    user_id = message.from_user.id
    
    if not await user_service.check_user_role(user_id, "driver"):
        return
    
    try:
        passenger_count = int(message.text)
    except ValueError:
        await send_message(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–û–õ–¨–ö–û –ö–û–õ–ò–ß–ï–°–¢–í–û –≤–æ—à–µ–¥—à–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —á–∏—Å–ª–æ–º.", True)
        return

    if passenger_count < 0 or passenger_count > 200:
        await send_message(message, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤–æ—à–µ–¥—à–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0 –¥–æ 200.", True)
        return
    
    bus_number = await user_manager.get_parameters(user_id=user_id, get_bus_number=True)

    if not await bus_stops_manager.get_stops(bus_number=bus_number, get_stop_id=True):
        await send_message(
            message,
            f"‚ùå –ö–∞–∂–µ—Ç—Å—è, –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞ ({bus_number}) –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –≠—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –∑–∞–∫—Ä–µ–ø–∏–ª –º–∞—Ä—à—Ä—É—Ç. –ü–æ–∫–∞ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!",
            reply=True
        )
        ConfigManager.log.logger.critical(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
        return

    await send_message(
        message,
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É",
        reply=True,
        reply_markup=await get_stops_keyboard(
            bus_stops_manager,
            bus_number,
            passenger_count
        )
    )

@router.callback_query(F.data.startswith("register_passengers_"))
async def handle_register_passengers(
    callback: CallbackQuery, 
    user_manager: UserManager,
    user_service: UserService, 
    bus_stops_manager: BusStopsManager, 
    sheets_manager: GoogleSheetsManager
):
    if not await user_service.check_user_role(callback.from_user.id, "driver"):
        return
    
    try:
        user_id = callback.from_user.id
        stop_id, passenger_count = map(int, callback.data.replace("register_passengers_", "").split("_"))
        driver_name, bus_number = await user_manager.get_parameters(user_id=user_id, get_name=True, get_bus_number=True)
        stop_name = await bus_stops_manager.get_stop(stop_id, get_stop_name=True)
    
    except Exception as e:
        await edit_message(callback.message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ handle_register_passengers. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    try:
        await sheets_manager.add_row(
            user_id,
            driver_name,
            bus_number,
            stop_name,
            passenger_count
        )
    except Exception as e:
        await edit_message(callback.message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ. –ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.", None)
        ConfigManager.log.logger.error(f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {driver_name}. –°–±–æ–π –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ/–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return

    await edit_message(
        callback.message,
        f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {stop_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –í–æ—à–ª–æ {passenger_count} –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤."
    )